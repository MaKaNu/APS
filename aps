#!/bin/bash
# vim: syntax=bash

# APS - Advanced Port Scanner
#
# Copyright FH Dortmund
# Author: Matti Kaupenjohann
# Date: 2021-04-16
#
# *****************************************************************************
#                                GPL 3 License
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <https://www.gnu.org/licenses/>.
# *****************************************************************************

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
# 			     EXPORTS                                          #
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#

export TERM=xterm-256color

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#  		           cleanup and error                                 #
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#

tempfiles=( )
cleanup() {
        rm -f "${tempfiles[@]}"
}
trap cleanup 0

error() {
  local parent_lineno="$1"
  local message="$2"
  local code="${3:-1}"
  if [[ -n "$message" ]] ; then
    echo "Error on or near line ${parent_lineno}: ${message}; exiting with status ${code}"
  else
    echo "Error on or near line ${parent_lineno}; exiting with status ${code}"
  fi
  exit "${code}"
}
trap 'error ${LINENO}' ERR

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
# 			     FUNCTIONS                                       #
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#

# Function multi array bubble sort
bubble_sort()
{   
local max=${#PORT_STAT_PID[@]}
size=${#PORT_STAT_PID[@]}
while ((max > 0))
do
	local i=0
	while ((i < max))
	do
		if [ "$i" != $(("$size"-1)) ] #array will not be out of bound
		then
			if [ "${PORT_STAT_PID[$i]}" \> "${PORT_STAT_PID[$((i + 1))]}" ]
			then
				local t_pid=${PORT_STAT_PID[$i]}
				PORT_STAT_PID[$i]=${PORT_STAT_PID[$((i + 1))]}
				PORT_STAT_PID[$((i + 1))]=$t_pid
				
				local t_local=${PORT_STAT_LOCAL[$i]}
				PORT_STAT_LOCAL[$i]=${PORT_STAT_LOCAL[$((i + 1))]}
				PORT_STAT_LOCAL[$((i + 1))]=$t_local

				local t_foreign=${PORT_STAT_FOREIGN[$i]}
				PORT_STAT_FOREIGN[$i]=${PORT_STAT_FOREIGN[$((i + 1))]}
				PORT_STAT_FOREIGN[$((i + 1))]=$t_foreign
				
				local t_status=${PORT_STAT_STATUS[$i]}
				PORT_STAT_STATUS[$i]=${PORT_STAT_STATUS[$((i + 1))]}
				PORT_STAT_STATUS[$((i + 1))]=$t_status


			fi
		fi
		((i += 1))
	done
	((max -= 1))
done
return 0
}

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#				     SCRIPT                                  #
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#

if ! [ "$(id -u)" = 0 ]; then
	error ${LINENO} "The script need to be run as root." 1
fi

# Read the ports
mapfile -t PORTS < <( nmap -p 1-65535 localhost | awk '/open/{print $1}' | cut -d'/' -f1 )
#PORTS=$( nmap -p 1-65535 localhost | awk '/open/{print $1}' | cut -d'/' -f1 )

# Read Services
mapfile -t SERVICES < <( nmap -p 1-65535 localhost | awk '/open/{print $3}' )
#SERVICES=$( nmap -p 1-65535 localhost | awk '/open/{print $3}' )

# Cycle over all ports
for ((i = 0; i < ${#PORTS[@]}; i++))
do
	printf "$(tput setab 235)$(tput setaf 166)%-120s$(tput sgr0)\n" "PORT SCANNED: ${PORTS[$i]} :: with Service: ${SERVICES[$i]}"
	mapfile -t PORT_STAT_LOCAL < <( netstat -tpna | awk -v port=":${PORTS[$i]}$" '($4 ~port || $5 ~port) && $1 ~ /tcp/{print $4}' )
	mapfile -t PORT_STAT_FOREIGN < <( netstat -tpna | awk -v port=":${PORTS[$i]}$" '($4 ~port || $5 ~port) && $1 ~ /tcp/{print $5}' )
	mapfile -t PORT_STAT_STATUS < <( netstat -tpna | awk -v port=":${PORTS[$i]}$" '($4 ~port || $5 ~port) && $1 ~ /tcp/{print $6}' )
	mapfile -t PORT_STAT_PID < <( netstat -tpna | awk -v port=":${PORTS[$i]}$" '($4 ~port || $5 ~port) && $1 ~ /tcp/{print $7}' | cut -d'/' -f1 )
	
	printf "$(tput smul)$(tput setaf 106)%-22s $(tput setaf 202)%-22s $(tput setaf 110)%-10s $(tput setaf 124)%-8s $(tput setaf 178)%-54s$(tput sgr0)\n" \
		"Local-Adress" "Foreign-Adress" "Status" "PID" "Process"	

	# Call the bubble sort function to sort the PIDs
	bubble_sort
	
	# Cycle over all possible connections
	for ((j = 0; j < ${#PORT_STAT_LOCAL[@]}; j++))
	do
		mapfile -t COMMAND < <( ps -p "${PORT_STAT_PID[$j]}" -o command | awk '!/COMMAND/' )
		
		if [ ${#COMMAND} -gt 54 ]
		then
			PROCESS=$( echo "${COMMAND[@]}" | awk '{ print substr($0, 1, 51) "..." }' )
		else
			PROCESS="${COMMAND[*]}"
		fi

		printf "$(tput setaf 106)%-22s $(tput setaf 202)%-22s $(tput setaf 110)%-10s $(tput setaf 124)%-8s $(tput setaf 178)%-54s$(tput sgr0)\n" \
                	"${PORT_STAT_LOCAL[$j]}" "${PORT_STAT_FOREIGN[$j]}" "${PORT_STAT_STATUS[$j]}" "${PORT_STAT_PID[$j]}" "$PROCESS"
	done
done


#sudo netstat -tulpnae | grep ${ports_array[0]}
